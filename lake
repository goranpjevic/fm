#!/usr/bin/env zsh

go_to() {
	case $(file --dereference --brief $1) in
		*directory*)
			show_selected=0
			start_line=1
			previous_directory="$(pwd)"
			cd $1
			draw_screen $2
			;;
		*text*)
			tput cnorm
			stty sane
			[ $EDITOR ] && $EDITOR $1 || vim $1 || vi $1 || nano $1 || ed $1
			draw_screen $current_line
			;;
		*)
			case $OSTYPE in
				*darwin*)
					open $1 2>/dev/null
					;;
				*)
					xdg-open $1 2>/dev/null
					;;
			esac
			;;
	esac
}

file_preview() {
	case $(file --dereference --brief $1) in
		*directory*)
			ls $([ "${show_hidden:=0}" = 1 ] && echo "-A") $1 2>/dev/null
			;;
		*text*)
			head -n $max_lines $1 | expand 2>/dev/null 
			;;
		*)
			file --dereference --brief $1 | expand 2>/dev/null 
			;;
	esac
	[ $2 ] && printf ' \n%.0s' {1..$2}
}

print_preview() {
	tput cup 1
	prefix=$(tput cuf $max_line_width; tput el)
	file_preview $1 $max_lines | cut -c 1-$max_line_width | sed -n "s/^/$prefix/;1,${max_lines}p"
}

update_position() {
	let "current_line = $1"
	chosen_line=$(echo $output | sed "${current_line}q;d")

	if [ $current_line -gt $end_line ]; then
		let "start_line = $current_line - $max_lines + 1"
		actual_line=$max_lines
		draw_screen $current_line
	elif [ $current_line -lt $start_line ]; then
		let "start_line = $current_line"
		actual_line=1
		draw_screen $current_line
	else
		let "actual_line = $current_line - $start_line + 1"
	fi
}

esc_all() {
	sed -e 's/[]\/$*.^[]/\\&/g'
}

quote_all() {
	sed "s/'/'\\\\''/g;s/\(.*\)/'\1'/"
}

move_line() {
	let "line_to_move_to = $1"
	if [ "$line_to_move_to" -le "$last_line" ] && [ "$line_to_move_to" -ge "1" ]; then
		update_position $current_line
		tput cup $actual_line
		echo $chosen_line | cut -c 1-$max_line_width

		update_position $1
		tput rev
		tput cup $actual_line
		echo $chosen_line | cut -c 1-$max_line_width
		tput sgr0

		print_preview $chosen_line

		selected_file=$(echo $([ "$show_selected" = 0 ] && echo $(pwd)"/")$chosen_line | esc_all)
		[ $(echo $selected_lines | sed -n "/^${selected_file}\$/=") ] && tput rev
		tput cup $(tput lines)
		tput el
		echo -n "$(ls -ld $chosen_line | cut -c 1-$(tput cols))"
		tput sgr0
	fi
}

draw_screen() {
	stty -echo
	tput clear
	tput civis

	tput bold
	if [ "${show_selected:=0}" = 0 ]; then
		output=$(file_preview .)
		echo $(pwd) | cut -c 1-$(tput cols)
	else
		output=$selected_lines
		echo "number of files selected: $(echo -n $selected_lines | grep -c ^)" | cut -c 1-$(tput cols)
	fi
	tput sgr0

	let "max_lines = $(tput lines) - 2"
	let "max_line_width = $(tput cols) / 2"
	let "last_line=$(echo $output | wc -l)"
	let "end_line = ${start_line:=1} + $max_lines - 1"
	[ "$end_line" -gt "$last_line" ] && end_line=$last_line
	current_line=${1:=1}

	if [ $output ]; then
		echo $output | sed -n "${start_line},${end_line}p" | cut -c 1-$max_line_width
		move_line $current_line
	fi
}

center_output() {
	let "actual_line = $max_lines / 2"
	let "start_line = $current_line - $actual_line"
	[ $start_line -lt 1 ] && start_line=1
	draw_screen $current_line
}

next() {
	all_matches=$(echo $output | sed -ne "/${pattern:=.}/I=")
	below_matches=$(echo $all_matches | awk "\$1>${current_line}")
	above_matches=$(echo $all_matches | awk "\$1<${current_line}")
	sorted_matches="${below_matches}\n${above_matches}"
	[ "${search_direction:=1}" = 0 ] && sorted_matches=$(echo $sorted_matches | tail -r)
	line_to_move_to=$(echo $sorted_matches | sed "/^\s*$/d" | sed -n "1p")
	[ $line_to_move_to ] && move_line $line_to_move_to
}

find() {
	let "search_direction = $1"
	read -sk1 letter
	pattern='^'$(echo $letter | esc_all)
	next
}

user_input() {
	stty sane
	tput cup $(tput lines)
	tput el
	echo -n $key
	tput cnorm
	read -r $1
}

search() {
	let "search_direction = $1"
	user_input pattern
	next
	draw_screen $current_line
}

select_file() {
	[ ! $output ] && return
	file_to_select=$([ "$show_selected" = 0 ] && echo $(pwd)"/")$1
	if [ "$(echo $selected_lines | sed -n "/^$(echo $file_to_select | esc_all)$/=")" ]; then
		selected_lines=$(echo $selected_lines | sed "/^$(echo $file_to_select | esc_all)$/d")
	else
		selected_lines=$(echo "$selected_lines\n$file_to_select" | sed "/^\s*$/d")
	fi
	move_line $current_line
}

copy_or_move() {
	[ ! $selected_lines ] || [ "$show_selected" = 1 ] && return
	tput cup $(tput lines)
	tput el
	if read -sq "?are you sure you want to $1 the selected files to the current directory? [y/N]"; then
		tput cup $(tput lines)
		tput el
		tput cnorm
		stty sane
		cp_or_mv=$([ $1 = "copy" ] && echo "cp -R" || echo "mv")
		eval $cp_or_mv -i $(echo $selected_lines | quote_all | paste -sd ' ' -) . && selected_lines= || read -sk1
	fi
	draw_screen
}

prune_selected_files() {
	i=1
	while [ $selected_lines ] && [ $i -le $(echo "$selected_lines" | wc -l) ]; do
		one_file=$(echo "$selected_lines" | sed -n "${i}p")
		[ -e "$one_file" ] && let "i = i + 1" || selected_lines=$(echo "$selected_lines" | sed "${i}d")
	done
}

redraw_screen() {
	prune_selected_files
	all_files=$([ "$show_selected" = 0 ] && file_preview . || echo "$selected_lines")
	let "number_of_files = $(echo $all_files | wc -l)"
	line_number=$(echo $all_files | sed -n "/^$(echo $chosen_line | esc_all)\$/=")
	if [ $line_number ]; then
		current_line=$line_number
	elif [ $number_of_files -lt $current_line ]; then
		current_line=$([ $number_of_files = 0 ] && echo 1 || echo $number_of_files)
	fi
	draw_screen $current_line
}

shell_command() {
	current_directory="$(pwd)"
	user_input command_to_eval
	one_line=$(echo $chosen_line | quote_all)
	all_lines=$(echo $output | quote_all | paste -sd ' ' -)
	eval $command_to_eval:gs/$./$one_line/:gs/$%/$all_lines || read -sk1
	[ $(pwd) != $current_directory ] && current_line=1
	redraw_screen
}

fuzzy_find() {
	go_to "$(fzf --preview 'case $(file {}) in *directory*) ls -la {} ;; *text*) cat {} ;; *) file {} ;; esac')"
	draw_screen
}

quit() {
	tput clear
	tput rmcup
	tput cnorm
	stty sane
	[ $1 ] && pwd >> $1
	exit
}

read_keys() {
	while true; do
		read -sk1 key
		[ $key = $'\u1b' ] && read -sk2 key
		case $key in
			'j'|'[B'|$'\ue')
				move_line "$current_line + 1"
				;;
			'k'|'[A'|$'\u10')
				move_line "$current_line - 1"
				;;
			'g')
				move_line 1
				;;
			'G')
				move_line $last_line
				;;
			'l'|'[C'|$'\u6')
				go_to $chosen_line
				;;
			'h'|'[D'|$'\u2')
				[ "$show_selected" = 1 ] || [ $(pwd) = "/" ] && continue
				go_to .. $(file_preview "$(dirname "$(pwd)")" | sed -n "/^$(basename "$(pwd)" | esc_all)\$/=")
				;;
			'H')
				move_line $start_line
				;;
			'M')
				move_line "($start_line + $end_line) / 2"
				;;
			'L')
				move_line $end_line
				;;
			'u')
				let "new_line = $current_line - ($max_lines / 2)"
				move_line $([ $new_line -lt 1 ] && echo 1 || echo $new_line)
				;;
			'd')
				let "new_line = $current_line + ($max_lines / 2)"
				move_line $([ $new_line -gt $last_line ] && echo $last_line || echo $new_line)
				;;
			'z')
				center_output
				;;
			'.')
				((show_hidden ^= 1))
				redraw_screen
				;;
			'~'|$'\u8')
				go_to $HOME
				;;
			'b')
				bookmarked_directory="$(pwd)"
				;;
			"'")
				[ $bookmarked_directory ] && go_to "$bookmarked_directory"
				;;
			'"')
				go_to "$previous_directory"
				;;
			'f')
				find 1
				;;
			'F')
				find 0
				;;
			'/')
				search 1
				;;
			'?')
				search 0
				;;
			'n')
				next
				;;
			'N')
				((search_direction ^= 1))
				next
				((search_direction ^= 1))
				;;
			'e'|$'\ub')
				fuzzy_find
				;;
			's'|' ')
				select_file $chosen_line
				;;
			't')
				((show_selected ^= 1))
				prune_selected_files
				draw_screen
				;;
			'c')
				copy_or_move "copy"
				;;
			'm')
				copy_or_move "move"
				;;
			':')
				shell_command
				;;
			'r'|$'\uc')
				redraw_screen
				;;
			'q')
				quit $1
				;;
		esac
	done
}

main() {
	tput smcup
	trap 'draw_screen $current_line' SIGWINCH
	trap 'quit $2' SIGINT
	go_to ${1:=.}
	read_keys $2
}

main $@
