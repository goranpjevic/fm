#!/bin/zsh

go_to() {
	case $(file --brief $1) in
		*directory*)
			cd $1
			;;
		*text*)
			vim $1
			;;
		*)
			open $1
			;;
	esac
}

file_preview() {
	case $(file $1) in
		*directory*)
			if [ "$show_hidden" = 1 ]; then
				ls -lA $1 2>/dev/null
			else
				ls -l $1 2>/dev/null
			fi
			;;
		*text*)
			cat $1 | expand
			;;
		*)
			file --brief $1
			;;
	esac
}

print_preview() {
	let "preview_line_length = $(tput cols) - 100"
	preview_text=$(file_preview $1 | cut -c 1-$preview_line_length)
	for ((i = 0; i < $maximum_lines; ++i)); do
		tput cup $i 100
		tput el
		echo $preview_text | sed "${i}q;d"
	done
}

update_position() {
	let "current_line = $1"

	chosen_line=$(echo $output | sed "${current_line}q;d")

	if [ $current_line -gt $last_line_to_output ]; then
		let "first_line_to_output = $current_line - $maximum_lines + 1"
		actual_line=$maximum_lines
		draw_screen $current_line
	elif [ $current_line -lt $first_line_to_output ]; then
		let "first_line_to_output = $current_line"
		actual_line=1
		draw_screen $current_line
	else
		let "actual_line = $current_line - $first_line_to_output + 1"
	fi
}

move_line() {
	let "line_to_move_to = $1"
	if [ ! "$line_to_move_to" -gt "$number_of_lines" ] && [ ! "$line_to_move_to" -lt "1" ]; then
		update_position $current_line
		tput cup $actual_line
		echo $chosen_line | cut -c 1-$(tput cols)

		update_position $1
		tput rev
		tput cup $actual_line
		echo $chosen_line | cut -c 1-$(tput cols)

		tput sgr0
		if [ "$enable_preview" = 1 ] && [ "$show_previews" = 1 ]; then
			print_preview $chosen_line
		fi

		tput cup $(tput lines)
		tput el
		echo -n $(ls -ld $chosen_line | cut -c 1-$(tput cols))
	fi
}


draw_screen() {
	tput clear
	tput civis

	if [ "$(tput cols)" -gt 150 ]; then
		let "show_previews = 1"
		let "maximum_content_line_width = 100"
	else
		let "show_previews = 0"
		let "maximum_content_line_width = $(tput cols)"
	fi

	if [ "$show_hidden" = 1 ]; then
		output=$(ls -A)
	else
		output=$(ls)
	fi

	tput bold
	echo $(pwd) | cut -c 1-$(tput cols)
	tput sgr0

	let "maximum_lines = $(tput lines) - 2"
	let "number_of_lines=$(echo $output | wc -l)"
	let "last_line_to_output = ${first_line_to_output:=1} + $maximum_lines - 1"
	echo $output | sed -n "${first_line_to_output},${last_line_to_output}p" | cut -c 1-$maximum_content_line_width

	current_line=${1:=1}

	move_line $current_line
}

go_to_parent_directory() {
	current_directory_name=${PWD##*/}
	if [ $current_directory_name ]; then
		go_to '..'
		if [ "$show_hidden" = 1 ]; then
			line_to_move_to=$(ls -A | sed -ne "/^${current_directory_name}\$/=")
		else
			line_to_move_to=$(ls | sed -ne "/^${current_directory_name}\$/=")
		fi
		draw_screen $line_to_move_to
	fi
}

toggle_hidden_files() {
	((show_hidden ^= 1))
	selected_line=$chosen_line
	draw_screen
	line_to_move_to=$(echo $output | sed -ne "/^${selected_line}\$/=")
	if [ $line_to_move_to ]; then
		move_line $line_to_move_to
	fi
}

next() {
	all_matches=$(echo $output | sed -ne "/${pattern}/I=")
	below_matches=$(echo $all_matches | awk "\$1>${current_line}{print}")
	above_matches=$(echo $all_matches | awk "\$1<${current_line}{print}")
	sorted_matches="${below_matches}\n${above_matches}"
	if [ "$search_direction" = 0 ]; then
		sorted_matches=$(echo $sorted_matches | tail -r)
	fi
	line_to_move_to=$(echo $sorted_matches | sed "/^\s*$/d" | sed -n "1p")
	if [ $line_to_move_to ]; then
		move_line $line_to_move_to
	fi
}

find() {
	read -sk1 letter
	pattern='^'$letter
	next
}

search() {
	tput cup $(tput lines)
	tput el
	if [ "$search_direction" = 1 ]; then
		printf "/"
	else
		printf "?"
	fi
	tput cnorm
	read pattern
	next
	draw_screen $current_line
}

shell_command() {
	tput cup $(tput lines)
	tput el
	printf ":"
	tput cnorm
	read command_to_eval
	eval $command_to_eval
}

fuzzy_find() {
	go_to $(fzf --preview 'case $(file {}) in *directory*) ls -la {} ;; *text*) cat {} ;; *) file {} ;; esac')
}

quit() {
	tput clear
	tput rmcup
	tput cnorm
	if [ $1 ]; then
		pwd >> $1
	fi
	exit
}

read_keys() {
	draw_screen

	while true; do
		escape_char=$(printf "\u1b")
		read -sk1 key
		if [ $key = $escape_char ]; then
			read -sk2 key
		fi

		case $key in
			'j'|'[B'|$(printf '\ue'))
				move_line "$current_line + 1"
				;;
			'k'|'[A'|$(printf '\u10'))
				move_line "$current_line - 1"
				;;
			'g')
				move_line 1
				;;
			'G')
				move_line $number_of_lines
				;;
			'l'|'[C'|$(printf '\u6'))
				go_to $chosen_line
				draw_screen
				;;
			'h'|'[D'|$(printf '\u2'))
				go_to_parent_directory
				;;
			'z')
				toggle_hidden_files
				;;
			'~'|$(printf '\u8'))
				cd ~
				draw_screen
				;;
			'f')
				let "search_direction = 1"
				find
				;;
			'F')
				let "search_direction = 0"
				find
				;;
			'/')
				let "search_direction = 1"
				search
				;;
			'?')
				let "search_direction = 0"
				search
				;;
			'n')
				next
				;;
			'N')
				((search_direction ^= 1))
				next
				((search_direction ^= 1))
				;;
			'e'|$(printf '\ub'))
				fuzzy_find
				draw_screen
				;;
			'r')
				((enable_preview ^= 1))
				draw_screen $current_line
				;;
			':')
				shell_command
				draw_screen
				;;
			'q')
				quit $2
				return
				;;
		esac
	done
}

fm() {
	cd ${1:=.}

	tput smcup
	let "show_hidden = 0"
	let "enable_preview = 0"
	trap 'draw_screen' SIGWINCH
	trap 'quit $2' SIGINT
	read_keys $(pwd) $2
}

fm $@
